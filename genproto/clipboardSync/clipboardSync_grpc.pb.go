// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: clipboardSync.proto

package clipboardSync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClipSyncService_CreateRoom_FullMethodName                      = "/ClipSyncService/CreateRoom"
	ClipSyncService_LeaveRoom_FullMethodName                       = "/ClipSyncService/LeaveRoom"
	ClipSyncService_SubscribeClipboardContentUpdate_FullMethodName = "/ClipSyncService/SubscribeClipboardContentUpdate"
	ClipSyncService_SendClipboardUpdate_FullMethodName             = "/ClipSyncService/sendClipboardUpdate"
)

// ClipSyncServiceClient is the client API for ClipSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipSyncServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeClipboardContentUpdate(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClipboardUpdate], error)
	SendClipboardUpdate(ctx context.Context, in *ClipboardUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clipSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipSyncServiceClient(cc grpc.ClientConnInterface) ClipSyncServiceClient {
	return &clipSyncServiceClient{cc}
}

func (c *clipSyncServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, ClipSyncService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipSyncServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClipSyncService_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipSyncServiceClient) SubscribeClipboardContentUpdate(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClipboardUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClipSyncService_ServiceDesc.Streams[0], ClipSyncService_SubscribeClipboardContentUpdate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, ClipboardUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClipSyncService_SubscribeClipboardContentUpdateClient = grpc.ServerStreamingClient[ClipboardUpdate]

func (c *clipSyncServiceClient) SendClipboardUpdate(ctx context.Context, in *ClipboardUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClipSyncService_SendClipboardUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipSyncServiceServer is the server API for ClipSyncService service.
// All implementations must embed UnimplementedClipSyncServiceServer
// for forward compatibility.
type ClipSyncServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error)
	SubscribeClipboardContentUpdate(*SubscribeRequest, grpc.ServerStreamingServer[ClipboardUpdate]) error
	SendClipboardUpdate(context.Context, *ClipboardUpdate) (*emptypb.Empty, error)
	mustEmbedUnimplementedClipSyncServiceServer()
}

// UnimplementedClipSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClipSyncServiceServer struct{}

func (UnimplementedClipSyncServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedClipSyncServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedClipSyncServiceServer) SubscribeClipboardContentUpdate(*SubscribeRequest, grpc.ServerStreamingServer[ClipboardUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeClipboardContentUpdate not implemented")
}
func (UnimplementedClipSyncServiceServer) SendClipboardUpdate(context.Context, *ClipboardUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClipboardUpdate not implemented")
}
func (UnimplementedClipSyncServiceServer) mustEmbedUnimplementedClipSyncServiceServer() {}
func (UnimplementedClipSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeClipSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipSyncServiceServer will
// result in compilation errors.
type UnsafeClipSyncServiceServer interface {
	mustEmbedUnimplementedClipSyncServiceServer()
}

func RegisterClipSyncServiceServer(s grpc.ServiceRegistrar, srv ClipSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedClipSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClipSyncService_ServiceDesc, srv)
}

func _ClipSyncService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipSyncServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClipSyncService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipSyncServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipSyncService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipSyncServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClipSyncService_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipSyncServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipSyncService_SubscribeClipboardContentUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClipSyncServiceServer).SubscribeClipboardContentUpdate(m, &grpc.GenericServerStream[SubscribeRequest, ClipboardUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClipSyncService_SubscribeClipboardContentUpdateServer = grpc.ServerStreamingServer[ClipboardUpdate]

func _ClipSyncService_SendClipboardUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClipboardUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipSyncServiceServer).SendClipboardUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClipSyncService_SendClipboardUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipSyncServiceServer).SendClipboardUpdate(ctx, req.(*ClipboardUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// ClipSyncService_ServiceDesc is the grpc.ServiceDesc for ClipSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClipSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClipSyncService",
	HandlerType: (*ClipSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _ClipSyncService_CreateRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _ClipSyncService_LeaveRoom_Handler,
		},
		{
			MethodName: "sendClipboardUpdate",
			Handler:    _ClipSyncService_SendClipboardUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeClipboardContentUpdate",
			Handler:       _ClipSyncService_SubscribeClipboardContentUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clipboardSync.proto",
}
